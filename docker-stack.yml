version: '3.8'

services:
  postgres_master:
    image: postgres:16
    environment:
      POSTGRES_DB: eve
      POSTGRES_USER: eve
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: repl_user
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPL_PASSWORD}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints:
          - node.labels.db == true
    command: >
      postgres
      -c wal_level=replica
      -c max_wal_senders=10
      -c max_replication_slots=10

  postgres_replica:
    image: postgres:16
    environment:
      POSTGRES_DB: eve
      POSTGRES_USER: eve
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: repl_user
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPL_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.db == true
    command: >
      bash -c "until pg_isready -h postgres_master -p 5432; do sleep 1; done &&
      pg_basebackup -h postgres_master -D /var/lib/postgresql/data -P -U repl_user &&
      echo \"primary_conninfo = 'host=postgres_master port=5432 user=repl_user password=$POSTGRES_REPL_PASSWORD'\" >> /var/lib/postgresql/data/postgresql.conf &&
      echo \"hot_standby = on\" >> /var/lib/postgresql/data/postgresql.conf &&
      touch /var/lib/postgresql/data/standby.signal &&
      postgres"
    depends_on:
      - postgres_master

  api:
    image: ${DOCKER_REGISTRY:-localhost}/eve_api:${TAG:-latest}
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DB_HOST=postgres_master
      - DB_PORT=5432
      - DB_USER=eve
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=eve
    networks:
      - backend
      - frontend
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        order: rolling-update
      restart_policy:
        condition: on-failure
    depends_on:
      - postgres_master

  frontend:
    image: ${DOCKER_REGISTRY:-localhost}/eve_frontend:${TAG:-latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=https://ran.backend.tadeasfort.com
    networks:
      - frontend
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        order: rolling-update
      restart_policy:
        condition: on-failure

caddy:
  image: caddy:2
  ports:
    - "80:80"
    - "443:443"
  volumes:
    - ./backend/Caddyfile:/etc/caddy/Caddyfile:ro
    - caddy_data:/data
    - caddy_config:/config
  environment:
    - ACME_AGREE=true
  networks:
    - frontend
  deploy:
    replicas: 1  # Changed to 1 since we're running on a specific node
    placement:
      constraints:
        - node.labels.caddy == true
    update_config:
      parallelism: 1
      order: rolling-update
  depends_on:
    - api
    - frontend

networks:
  frontend:
  backend:

volumes:
  postgres_master_data:
  postgres_replica_data:
  caddy_data:
  caddy_config:

